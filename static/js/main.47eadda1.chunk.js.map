{"version":3,"sources":["firebase.js","DisplayEntries.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","DisplayEntries","props","entries","callback","map","entry","className","title","onClick","id","App","submitEntry","e","preventDefault","dbRef","database","ref","userEntry","journalTitle","inputTitle","value","journalEntry","textareaEntry","push","state","on","data","firebaseDataObj","val","entriesArray","entryObj","setState","action","onSubmit","this","htmlFor","type","required","maxLength","placeholder","name","minLength","cols","rows","child","remove","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAmBAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,ECDeS,G,MApBQ,SAACC,GAAU,IACvBC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,SAEhB,OACI,8BAEQD,EAAQE,KAAI,SAACC,GACT,OACI,sBAAoBC,UAAU,QAA9B,UACI,6BAAKD,EAAME,QACX,4BAAIF,EAAMA,QACV,wBAAQG,QAAS,kBAAML,EAASE,EAAMI,KAAtC,4BAHMJ,EAAMI,WC6GzBC,E,kDAhGb,aAAc,IAAD,8BACX,gBAiCFC,YAAc,SAACC,GACbA,EAAEC,iBAEF,IAAMC,EAAQvB,EAASwB,WAAWC,MAG5BC,EAAY,CAChBC,aAAc,EAAKC,WAAWC,MAC9BC,aAAc,EAAKC,cAAcF,OAEnCN,EAAMS,KAAKN,GAGX,EAAKE,WAAWC,MAAhB,GACA,EAAKE,cAAcF,MAAnB,IA9CA,EAAKI,MAAQ,CACXtB,QAAS,IAHA,E,gEAOO,IAAD,OACHX,EAASwB,WAAWC,MAG5BS,GAAN,SAAkB,SAACC,GACjB,IAAMC,EAAkBD,EAAKE,MAGzBC,EAAe,GAEnB,IAAK,IAAIxB,KAASsB,EAAgB,CAChC,IAAMG,EAAW,CACfrB,GAAGJ,EACHE,MAAMoB,EAAgBtB,GAAOa,aAC7Bb,MAAOsB,EAAgBtB,GAAOgB,cAGhCQ,EAAaN,KAAKO,GAIpB,EAAKC,SAAS,CACZ7B,QAAQ2B,S,+BAsBL,IAAD,OACN,OACE,sBAAKvB,UAAU,MAAf,UAEE,iCACE,sBAAKA,UAAU,qBAAf,UACE,kDAEA,uBAAM0B,OAAO,IAAIC,SAAUC,KAAKvB,YAAhC,UACE,uBAAOwB,QAAQ,eAAe7B,UAAU,SAAxC,2BACA,uBAAO8B,KAAK,OAAO3B,GAAG,eAAe4B,UAAU,EAAMC,UAAU,KAAKC,YAAY,sBAAsBvB,IAAK,SAAAT,GAAK,OAAI,EAAKY,WAAaZ,KAEtI,sBAAKD,UAAU,eAAf,UACE,uBAAO6B,QAAQ,eAAe7B,UAAU,SAAxC,oCACA,0BAAUG,GAAG,eAAe+B,KAAK,eAAeH,UAAU,EAAMI,UAAU,MAAMH,UAAU,MAAMC,YAAY,uBAAuBG,KAAK,KAAKC,KAAK,KAAK3B,IAAK,SAAAX,GAAK,OAAI,EAAKiB,cAAgBjB,QAG5L,uBAAO+B,KAAK,SAAS9B,UAAU,SAASc,MAAM,0BAKpD,+BACE,qBAAKd,UAAU,kBAAf,SACE,cAAC,EAAD,CACEJ,QAASgC,KAAKV,MAAMtB,QACpBC,SAAU,SAACM,GACKlB,EAASwB,WAAWC,MAC5B4B,MAAMnC,GAAIoC,gBAMxB,iCACE,qBAAKvC,UAAU,UAAf,SACE,kCAAK,OAAL,IAAe,mBAAGwC,KAAK,oCAAR,8BAAf,OAAmF,mBAAGA,KAAK,2BAAR,0BAAnF,uB,GAxFMC,aCRHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.47eadda1.chunk.js","sourcesContent":["// Core Firebase SDK:\r\nimport firebase from 'firebase/app';\r\n\r\n// Realtime database library.\r\nimport 'firebase/database';\r\n\r\n// Initialize firebase.\r\n    // Use YOUR app's firebase config object.\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyB0bv3ao0yC21mqWcHvmbgQHlmHCxCzm_Y\",\r\n    authDomain: \"project5fbreact.firebaseapp.com\",\r\n    databaseURL: \"https://project5fbreact.firebaseio.com\",\r\n    projectId: \"project5fbreact\",\r\n    storageBucket: \"project5fbreact.appspot.com\",\r\n    messagingSenderId: \"125314626288\",\r\n    appId: \"1:125314626288:web:afb469a88e51d50ce10835\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","const DisplayEntries = (props) =>{\r\n    const {entries, callback} = props;\r\n    // console.log();\r\n    return(\r\n        <div>\r\n            {\r\n                entries.map((entry) =>{\r\n                    return(\r\n                        <div key={entry.id} className=\"entry\">\r\n                            <h2>{entry.title}</h2>\r\n                            <p>{entry.entry}</p>\r\n                            <button onClick={() => callback(entry.id)}>Delete Entry</button>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayEntries","import { Component } from 'react';\nimport firebase from './firebase.js'\nimport './styles/App.scss';\nimport DisplayEntries from './DisplayEntries.js'\n\n// Add firebase modules to project. -DONE\n    // configure and initialize firebase. -DONE\n    // Export/import firebase. -DONE\n\n// Display already submitted journal entries on the page in the form of a button OR link on page load.\n    // Turn journal entries into a component that will be a square page (or post-it) that contains the title and date.\n\n// Add an entry\n    // Prevent the browser from refreshing for journal entry submits. -DONE\n    // Listen for a button click when the form is submitted. -DONE.\n    // Clear journal entry form so that it's ready for a new entry. -DONE.\n\n// Listen for a button click for when the user opens up an already submitted journal entry (user cannot make changes). User is allowed to read what they wrote.\n    // Grant user the option to delete their journal entry from the page if they so choose (from the database, and state). -DONE\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      entries: []\n    }\n  }\n\n  componentDidMount(){\n    const dbRef = firebase.database().ref();\n\n    // Grab data from the database.\n    dbRef.on(`value`, (data) =>{\n      const firebaseDataObj = data.val();\n\n      // A new array to store the data.\n      let entriesArray = [];\n\n      for (let entry in firebaseDataObj){\n        const entryObj = {\n          id:entry,\n          title:firebaseDataObj[entry].journalTitle,\n          entry: firebaseDataObj[entry].journalEntry\n        }\n\n        entriesArray.push(entryObj);\n      }\n\n      // Store data in state property.\n      this.setState({\n        entries:entriesArray\n      })\n    })\n  }\n\n  submitEntry = (e) =>{\n    e.preventDefault();\n\n    const dbRef = firebase.database().ref();\n\n    // Push user inputs to the database.\n    const userEntry = {\n      journalTitle: this.inputTitle.value,\n      journalEntry: this.textareaEntry.value\n    }\n    dbRef.push(userEntry);\n\n    // Clear user inputs.\n    this.inputTitle.value = ``;\n    this.textareaEntry.value = ``;\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n\n        <header>\n          <div className=\"headerForm wrapper\">\n            <h1>Into the Future!</h1>\n\n            <form action=\"#\" onSubmit={this.submitEntry}>\n              <label htmlFor=\"journalTitle\" className=\"srOnly\">Journal title</label>\n              <input type=\"text\" id=\"journalTitle\" required={true} maxLength=\"30\" placeholder=\"Journal entry title\" ref={title => this.inputTitle = title}></input>\n\n              <div className=\"journalEntry\">\n                <label htmlFor=\"journalEntry\" className=\"srOnly\">Today's journal entry:</label>\n                <textarea id=\"journalEntry\" name=\"journalEntry\" required={true} minLength=\"250\" maxLength=\"500\" placeholder=\"What's on your mind?\" cols=\"30\" rows=\"10\" ref={entry => this.textareaEntry = entry}></textarea>\n              </div>\n\n              <input type=\"submit\" className=\"submit\" value=\"Submit Entry!\"></input>\n            </form >\n          </div>\n        </header>\n\n        <main>\n          <div className=\"entries wrapper\">\n            <DisplayEntries\n              entries={this.state.entries}\n              callback={(id) => {\n                const dbRef = firebase.database().ref();\n                dbRef.child(id).remove();\n              }}\n            />\n          </div>\n        </main>\n\n        <footer>\n          <div className=\"wrapper\">\n            <p> {'\\u00A9'} <a href=\"https://github.com/Hans-Christian\">Hans C. Severino</a> at <a href=\"https://junocollege.com/\">Juno College</a> 2020 </p>\n          </div>\n        </footer>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}